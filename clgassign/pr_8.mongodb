/ Create the collection 'books' and insert 5 records

db.books.insertMany([

    {

        TITLE: "mongodb",

        DESCRIPTION: "A NoSQL database",

        BY: "john",

        URL: "http://example.com/mongodb",

        TAGS: ["database", "nosql", "mongodb"],

        LIKES: 15

    },

    {

        TITLE: "nosql overview",

        DESCRIPTION: "Overview of NoSQL databases",

        BY: "jane",

        URL: "http://example.com/nosql",

        TAGS: ["database", "nosql"],

        LIKES: 5

    },

    {

        TITLE: "sql vs nosql",

        DESCRIPTION: "Comparing SQL and NoSQL databases",

        BY: "john",

        URL: "http://example.com/sql-vs-nosql",

        TAGS: ["database", "sql", "nosql"],

        LIKES: 20

    },

    {

        TITLE: "mongodb advanced",

        DESCRIPTION: "Advanced topics in MongoDB",

        BY: "john",

        URL: "http://example.com/mongodb-advanced",

        TAGS: ["database", "mongodb"],

        LIKES: 30

    },

    {

        TITLE: "nosql best practices",

        DESCRIPTION: "Best practices for NoSQL databases",

        BY: "jane",

        URL: "http://example.com/nosql-best-practices",

        TAGS: ["database", "nosql"],

        LIKES: 8

    }

]);
// Insert a document with additional fields 'user name' and 'comments'
db.books.insertOne({
    TITLE: "mongodb tutorial",
    DESCRIPTION: "A comprehensive guide to MongoDB",
    BY: "john",
    URL: "http://example.com/mongodb-tutorial",
    TAGS: ["database", "mongodb", "tutorial"],
    LIKES: 12,
    USERNAME: "user123",
    COMMENTS: "Great tutorial!"
});

// Display documents where TITLE is 'mongodb'
db.books.find({ TITLE: "mongodb" });

// Display documents where BY is 'john' or TITLE is 'mongodb'
db.books.find({ $or: [{ BY: "john" }, { TITLE: "mongodb" }] });



// Display documents where LIKES is greater than 10

db.books.find({ LIKES: { $gt: 10 } });


// Display documents where LIKES > 100 and (TITLE is 'mongodb' or BY is 'john')

db.books.find({ 

    LIKES: { $gt: 100 }, 

    $or: [{ TITLE: "mongodb" }, { BY: "john" }] 

});



// Update the title of the document with TITLE 'mongodb' to 'mongodb overview'

db.books.updateOne(

    { TITLE: "mongodb" },

    { $set: { TITLE: "mongodb overview" } }

);



// Delete the document with TITLE 'nosql overview'

db.books.deleteOne({ TITLE: "nosql overview" });



// Display exactly two documents written by 'john'

db.books.find({ BY: "john" }).limit(2);



// Display the second document published by 'john'

db.books.find({ BY: "john" }).skip(1).limit(1);



// Display all books sorted by TITLE

db.books.find().sort({ TITLE: 1 }); // 1 for ascending order



// Insert a document using the save method

db.books.save({

    TITLE: "mongodb performance
    });
