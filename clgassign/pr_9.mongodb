
// Create the collection and insert sample documents

db.Books.insertMany([

    {

        TITLE: "mongodb",

        DESCRIPTION: "A NoSQL database",

        BY: "john",

        URL: "http://example.com/mongodb",

        TAGS: ["database", "nosql", "mongodb"],

        LIKES: 15

    },

    {

        TITLE: "nosql overview",

        DESCRIPTION: "Overview of NoSQL databases",

        BY: "jane",

        URL: "http://example.com/nosql",

        TAGS: ["database", "nosql"],

        LIKES: 5

    },

    {

        TITLE: "sql vs nosql",

        DESCRIPTION: "Comparing SQL and NoSQL databases",

        BY: "john",

        URL: "http://example.com/sql-vs-nosql",

        TAGS: ["database", "sql", "nosql"],

        LIKES: 20

    },

    {

        TITLE: "mongodb advanced",

        DESCRIPTION: "Advanced topics in MongoDB",

        BY: "john",

        URL: "http://example.com/mongodb-advanced",

        TAGS: ["database", "mongodb"],

        LIKES: 30

    },

    {

        TITLE: "nosql best practices",

        DESCRIPTION: "Best practices for NoSQL databases",

        BY: "jane",

        URL: "http://example.com/nosql-best-practices",

        TAGS: ["database", "nosql"],

        LIKES: 8

    }

]);

//1. Find the Number of Books Published by John


db.Books.countDocuments({ BY: "john" });

//Output: This will return the number of documents where BY is "john".

//2. Find Books Which Have Minimum Likes and Maximum Likes Published by John





db.Books.aggregate([

    { $match: { BY: "john" } },

    {

        $group: {

            _id: null,

            minLikes: { $min: "$LIKES" },

            maxLikes: { $max: "$LIKES" }

        }

    }

]);

//Output: This will return an object containing the minimum and maximum likes.
//3. Find the Average Number of Likes of the Books Published by John



db.Books.aggregate([

    { $match: { BY: "john" } },

    {

        $group: {

            _id: null,

            averageLikes: { $avg: "$LIKES" }

        }

    }

]);

//Output: This will return the average number of likes for books published by "john".
//4. Find the First and Last Book Published by John


// First book

db.Books.find({ BY: "john" }).sort({ TITLE: 1 }).limit(1);


// Last book

db.Books.find({ BY: "john" }).sort({ TITLE: -1 }).limit(1);

//Output:

    //The first command will return the alphabetically first book by "john".
    //The second command will return the alphabetically last book by "john".

//5. Create an Index on Author Name



db.Books.createIndex({ BY: 1 });

//Output: This will return information about the index created.
//Display the Books Published by John and Check if It Uses the Index


db.Books.find({ BY: "john" }).hint({ BY: 1 });
