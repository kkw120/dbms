tee assignment2.txt
CREATE DATABASE assignment2; 
USE assignment2;
-- Create tables
SELECT employee_name FROM employee WHERE 
employee_name LIKE '%a%';
-- b. Calculate the average salary of employees 
SELECT AVG(monthly_salary) AS avg_salary FROM works;
-- c. Count the number of employees in each company 
SELECT company_name, COUNT(employee_name) AS 
num_employees FROM works GROUP BY company_name;
-- d. Find the length of each employee's name 
SELECT employee_name, LENGTH(employee_name) AS 
name_length FROM employee;
-- e. Find employees hired before a specific date
-- Assuming there is a hire_date column in the works 
table
ALTER TABLE works ADD COLUMN hire_date DATE;
UPDATE works SET hire_date = '2020-01-01' WHERE 
employee_name = 'Anita Sharma';
-- Repeat the update for other employees as needed
SELECT employee_name FROM works WHERE hire_date < 
'2021-01-01';
Assignment 2
CREATE TABLE instructor ( 
instructor_id VARCHAR(5), 
instructor_name VARCHAR(90), 
instructor_city VARCHAR(25), 
specialization VARCHAR(30), 
PRIMARY KEY (instructor_id)
);
CREATE TABLE student ( 
student_id INT, 
student_name VARCHAR(60), 
instructor_id VARCHAR(5), 
student_city VARCHAR(35),
FOREIGN KEY (instructor_id) REFERENCES 
instructor(instructor_id)
);
-- Insert data into instructor table 
INSERT INTO instructor VALUES
('1001', 'Ashwin', 'Maharashtra', 'Science'),
('1002', 'Nina', 'Maharashtra', 'Arts'),
('1003', 'Ravi', 'Tamil Nadu', 'Commerce'),
('1004', 'Anil', 'Uttar Pradesh', 'Science'),
('1005', 'Sita', 'Telangana', 'Arts'),
('1006', 'Sanjay', 'Gujarat', 'Commerce'),
('1007', 'Arun', 'Punjab', 'Science'),
('1008', 'Meera', 'Kerala', 'Arts'),
('1009', 'Rajesh', 'Rajasthan', 'Commerce'),
('1010', 'Kumar', 'Madhya Pradesh', 'Science'),
('1011', 'Neelam', 'Odisha', 'Arts'),
('1012', 'Deepak', 'West Bengal', 'Commerce'),
('1013', 'Sunil', 'Haryana', 'Science'),
('1014', 'Pooja', 'Bihar', 'Arts'),
('1015', 'Suresh', 'Assam', 'Commerce'),
('1016', 'Gaurav', 'Chhattisgarh', 'Science'),
('1017', 'Ritika', 'Jharkhand', 'Arts'),
('1018', 'Kiran', 'Goa', 'Commerce'),
('1019', 'Vikram', 'Himachal Pradesh', 'Science'),
('1020', 'Asha', 'Uttarakhand', 'Arts');
-- Insert data into student table 
INSERT INTO student VALUES
(2, 'Asma', '1001', 'Karnataka'),
(3, 'Rahul', '1002', 'Maharashtra'),
(4, 'Priya', '1003', 'Tamil Nadu'),
(5, 'Amit', '1004', 'Uttar Pradesh'),
(6, 'Sneha', '1005', 'Telangana'),
(7, 'Vikram', '1006', 'Gujarat'),
(8, 'Neha', '1007', 'Punjab'),
(9, 'Sanjay', '1008', 'Kerala'),
(10, 'Meera', '1009', 'Rajasthan'),
(11, 'Ravi', '1010', 'Madhya Pradesh'),
(12, 'Pooja', '1011', 'Odisha'),
(13, 'Kiran', '1012', 'West Bengal'),
(14, 'Deepak', '1013', 'Haryana'),
(15, 'Anjali', '1014', 'Bihar'),
(16, 'Rahul', '1015', 'Assam'),
(17, 'Jaya', '1016', 'Chhattisgarh'),
(18, 'Vinay', '1017', 'Jharkhand'),
(19, 'Swati', '1018', 'Goa'),
(20, 'Raj', '1019', 'Himachal Pradesh'),
(21, 'Asha', '1020', 'Uttarakhand');
-- 1. Find the instructor of each student. 
SELECT student.student_name, 
instructor.instructor_name
FROM student
JOIN instructor ON student.instructor_id = 
instructor.instructor_id;
-- 2. Find the student who is not having any 
instructor.
SELECT student_name 
FROM student
WHERE instructor_id IS NULL;
-- 3. Find the student who is not having any 
instructor as well as the instructor who is not 
having a student.
-- Students without an instructor 
SELECT student_name
FROM student
WHERE instructor_id IS NULL;
-- Instructors without students 
SELECT instructor_name
FROM instructor
WHERE instructor_id NOT IN (SELECT instructor_id FROM 
student);
-- 4. List students and their instructors for a 
specific specialization (e.g., 'Science').
SELECT student.student_name, 
instructor.instructor_name 
FROM student
JOIN instructor ON student.instructor_id = 
instructor.instructor_id
WHERE instructor.specialization = 'Science';
-- 5. Develop SQL query to find students whose city 
does not match with their instructor.
SELECT student.student_name, student.student_city, 
instructor.instructor_name, 
instructor.instructor_city
FROM student
JOIN instructor ON student.instructor_id = 
instructor.instructor_id
WHERE student.student_city <> 
instructor.instructor_city;
-- 6. List All Instructors and Their Students 
(Including Without Students).
SELECT instructor.instructor_name, 
student.student_name
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
ORDER BY instructor.instructor_name;
-- 7. List of students of each instructor who stays 
in Pune (Instructor).
SELECT student.student_name, 
instructor.instructor_name 
FROM student
JOIN instructor ON student.instructor_id = 
instructor.instructor_id
WHERE instructor.instructor_city = 'Pune';
-- 8. Calculate the Average Number of Students per 
Instructor in Nashik.
SELECT AVG(student_count) 
FROM (
SELECT COUNT(student.student_id) AS student_count 
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
WHERE instructor.instructor_city = 'Nashik' 
GROUP BY instructor.instructor_id
) AS avg_students;
-- 9. Create a view containing the total number of 
students whose instructor belongs to ‘Pune’.
CREATE VIEW StudentsWithPuneInstructors AS
SELECT COUNT(student.student_id) AS total_students 
FROM student
JOIN instructor ON student.instructor_id = 
instructor.instructor_id
WHERE instructor.instructor_city = 'Pune';
-- 10. Write the following queries on the view:
-- a. List All Specializations of Instructors in Pune 
SELECT DISTINCT specialization
FROM instructor
WHERE instructor_city = 'Pune';
-- b. Count Students for Each Instructor in Pune 
SELECT instructor.instructor_name, 
COUNT(student.student_id) AS student_count
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
WHERE instructor.instructor_city = 'Pune' 
GROUP BY instructor.instructor_name;
-- c. List the Number of Students Grouped by 
Specialization of Instructors in Pune
SELECT instructor.specialization, 
COUNT(student.student_id) AS student_count
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
WHERE instructor.instructor_city = 'Pune' 
GROUP BY instructor.specialization;
-- d. List Instructors from Pune with No Students 
SELECT instructor.instructor_name
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
WHERE instructor.instructor_city = 'Pune' AND 
student.student_id IS NULL;
-- Design 5 more queries having join of 3 tables and 
aggregate functions as per your choice:
-- Note: Since there are only two tables given 
(student and instructor), the "join of 3 tables" part 
cannot be fulfilled.
-- However, I'll provide aggregate functions 
involving these two tables.
-- 1. Find the number of students each instructor has 
in each specialization.
SELECT instructor.instructor_name, 
instructor.specialization, COUNT(student.student_id) 
AS student_count
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
GROUP BY instructor.instructor_name, 
instructor.specialization;
-- 2. List the instructors who have more than 5 
students and their specialization.
SELECT instructor.instructor_name, 
instructor.specialization, COUNT(student.student_id) 
AS student_count
FROM instructor
LEFT JOIN student ON instructor.instructor_id = 
student.instructor_id
GROUP BY instructor.instructor_name, 
instructor.specialization
HAVING student_count > 5;
-- 3. Find the total number of students in each city 
for each specialization.
SELECT instructor.specialization, 
student.student_city, COUNT(student.student_id) AS 
total_students
FROM instructor
JOIN student ON instructor.instructor_id = 
student.instructor_id
GROUP BY instructor.specialization, 
student.student_city;
-- 4. List instructors along with the total number of 
students in each city.
SELECT instructor.instructor_name, 
student.student_city, COUNT(student.student_id) AS 
total_students
FROM instructor
JOIN student ON instructor.instructor_id = 
student.instructor_id
GROUP BY instructor.instructor_name, 
student.student_city;
CREATE DATABASE assignment3; 
USE assignment3;
CREATE TABLE employee (
employee_name VARCHAR(50) PRIMARY KEY, 
street VARCHAR(50),
city VARCHAR(50)
);
CREATE TABLE company (
company_name VARCHAR(50) PRIMARY KEY, 
city VARCHAR(50)
Assignment 3
-- 5. Find the city with the highest number of 
students for each specialization.
SELECT instructor.specialization, 
student.student_city, COUNT(student.student_id) AS 
total_students
FROM instructor
JOIN student ON instructor.instructor_id = 
student.instructor_id
GROUP BY instructor.specialization, 
student.student_city
ORDER BY instructor.specialization, total_students 
DESC;
